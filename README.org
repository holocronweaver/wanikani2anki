Export WaniKani data to an Anki deck using Python 3.

Uses [[https://community.wanikani.com/t/API-V2-Alpha-Documentation/18987][WaniKani API v2.0 alpha]] (updated to spec as of 2017-08-04).

TODO: Give example images of WaniKani card on Anki desktop and AnkiDroid.
* Features
** Export radicals, kanji, vocabulary
Each card has the following data (when relevant):
- meanings
- readings
- user meanings
- all user notes
- SRS status (optional)^
- TODO: vocabulary audio
- TODO: example sentences
- WaniKani level number

^ Anik deck retains WaniKani ordering. Cards are first ordered by
ascending WaniKani level, then by radicals -> kanji -> vocabulary. If
you don't export the WaniKani SRS status, then by default you will
learn cards in the deck order.
** TODO: Update Anki Deck
*Not yet implemented!* See Issue [[https://github.com/holocronweaver/wanikani2anki/issues/1][#1]].

After an initial export to Anki, the user may update their WaniKani
collection and wish to update their Anki deck to keep it in sync.
** TODO: Filters
*Not yet implemented!* See Issue [[https://github.com/holocronweaver/wanikani2anki/issues/2][#2]].

Filter what content gets exported from WaniKani.
- burned items
- low success items
** Multiple Ways to Use
Includes a website, Python library, and CLI.
* Instructions
** TODO: Installation
Depends genanki.
** TODO: Create Anki Deck
** TODO: Update Anki Deck
** TODO: Change Card Type / Merge Into Existing Deck
If you have an existing Japanese Anki deck, you may have pre-existing
card templates you wish to reuse. Alternatively, you may not like the
provided card template and wish to create your own.

You can convert the exported WaniKani card type to any card type you
want from within Anki. This requires mapping fields from one card type
to another.

Another option is to edit the WaniKani card.

Note that the mapping will need to be repeated in the future if you
re-export WaniKani to Anki to keep your deck synchronized with any
changes.
* WaniKani
** Base Data
Non-user specific data rarely changes and is thus cached separate from
user data. Typically this data should be updated periodically while
the server is idle, say once a week.
TODO: Provide example of updating base data.
** User Data
User data is cached. This allows for only updated data to be retrieved
from WaniKani, reducing data transfer costs.

Typically a server will remove old user caches over time, say after a
few months.
* Future Plans
** Support vocabulary audio and example sentences.
See issue [[https://github.com/holocronweaver/wanikani2anki/issues/3][#3]].

WaniKani API V2 is supposedly going to support vocabulary audio and
example sentences in the future. See related [[https://community.wanikani.com/t/API-V2-Alpha-Documentation/18987/67][WaniKani form post]].

Meanwhile, this content can be obtained by scraping the site.

Since this content rarely changes and is user-independent, updates can
be done very infrequently, maybe once or twice a year.
** Update Anki decks.
Need to figure out how to update Anki decks without disrupting SRS
divergence between Anki and WaniKani.
** Support export filters.
* Notice
This software is meant to aid your studies. If you find WaniKani
useful, support it by buying a subscription!

The author is in no way associated with the maintainers of Tofugu or
WaniKani. Just a happy user who wants offline access, greater
customizability, and more control over their data.
* Notes
** Links
- [[https://www.wanikani.com/api][V1 API]]
- [[https://github.com/ankidroid/Anki-Android/wiki/Database-Structure][Database structure]]
- [[http://decks.wikia.com/wiki/Anki_APKG_format_documentation][APKG format]]
- [[https://github.com/ankidroid/Anki-Android/wiki/Advanced-formatting][advanced card formatting]]
- [[http://wanakana.com/docs/global.html][WanaKana]] - keyboard API ([[https://community.wanikani.com/t/Need-help-with-JavaScript-in-Anki/16514][useful post]])
- [[https://www.reddit.com/r/LearnJapanese/comments/41wxll/complete_genki_deck_for_anki_with_internal_ime/][Wanki deck]] - Anki deck: Genki + complex WaniKani-like card style
** WaniKani SRS
WaniKani has 10 SRS stages: new, 4H, 8H, 24H, 3D, 1W, 2W
(master), 1M (enlighten), 4M (burn), burned.

These map to Anki fairly well: new, 4H + 8H (learning), 24H to 4M
(review). Burning doesn't exist in Anki without addons, but intervals
eventually become enormous (years). Burning can be effectively
mimicked by periodically setting the intervals of all cards with
intervals greater than, say, 1 year, to 100 years.
** Anki SRS
Anki SRS has the following progression stages: new, learning, and review.
*** New
A card that has not been seen before. After its introduction, new
cards transition to the learning stage.
*** Learning
A short stage that transitions new cards into your regular review
queue. It does this by exposing you to the card for the first time,
then repeating the card a number of times over relatively short,
steadily increasing time intervals until all learning steps have been
completed. Once all learning steps are complete, the card graduates to
the review stage.

By default there are two learning steps, 1 minute and 10 minutes.
*** Review
Review involves several parameters. Some are deck-wide constants,
others are per-card variables whose initial values are provided by
deck settings.

Each card has an *interval*, the number of days between reviews.

After each review, the interval is updated:

new interval = ease * (easy bonus) * (interval modifier) * (old interval)

Card defaults: interval = 1, ease = 250%.
Constant defaults: easy bonus = 130%, interval modifier = 100%.
These default can be user modified.

*Interval modifier* is purely for user customization and does notihng by
default. Anki doc suggests using this SuperMemo formula to calculate a
desired modifier:

interval modifier = log(desired retention%) / log(current retention%)
* Alternatives
| Project                      | WaniKani API version | Interface        | Language | Description                                                                                                                                     |
|------------------------------+----------------------+------------------+----------+-------------------------------------------------------------------------------------------------------------------------------------------------|
| wanikani2anki (this project) |                    2 | scripts, library | Python   | Simple interfaces, lots of customization options. Library makes it easy to create highly customized decks.                                      |
| [[https://github.com/dennmart/wanikani-to-anki][wanikani-to-anki]] ([[www.wanikanitoanki.com][website]])   |                    1 | website          | Ruby     | Easy to use. Creates raw CSV file for Anki, not a deck. User must make and style cards themselves (considerable work!). Limited export options. |
| [[https://github.com/nigelkerr/wanikani2anki][wanikani2anki]]                |                    1 | Anki addon       | Python   | Same name, but very different! Anki addon, uses Anki's built-in Python interface.                                                               |
| [[https://github.com/dendriticspine/WaniAnki-Python][WaniKani-Python]]              |                    1 | scripts          | Python   | Includes Kanji stroke order. Script interface split between mobile and desktop. Simple, but not very flexible.                                  |
